#!/usr/bin/perl

use strict;
use warnings;

use Cwd;
use Getopt::Long;

do '../bin/setlib.cfg';
require Foswiki;
require Foswiki::Func;
require Foswiki::Time;
require Foswiki::Plugins::ActionTrackerPlugin;
require Foswiki::Plugins::ActionTrackerPlugin::Action;
require Foswiki::Plugins::ActionTrackerPlugin::ActionSet;
require Foswiki::Plugins::ActionTrackerPlugin::Format;
require Foswiki::Plugins::TasksAPIPlugin;

# Configuration default values
my %cfg = (
  context    => '',
  dedup      => 0,
  defaults   => {},
  dateformat => {},
  filter     => {},
  force      => 0,
  form       => '',
  help       => 0,
  host       => '',
  list       => 0,
  logins     => [],
  map        => {},
  nodry      => 0,
  reindex    => 0,
  remove     => 0,
  source     => [],
  verbose    => 0,
);

# Parse command line parameters
Getopt::Long::GetOptions(
  'context|c=s'       => \$cfg{context},
  'ignore-duplicates' => \$cfg{dedup},
  'defaults=s%'       => \$cfg{defaults},
  'dateformat|d=s%'   => \$cfg{dateformat},
  'filter=s%'         => \$cfg{filter},
  'force'             => \$cfg{force},
  'form|f=s'          => \$cfg{form},
  'help|h'            => \$cfg{help},
  'host=s'            => \$cfg{host},
  'list-fields|l'     => \$cfg{list},
  'map|m=s%'          => \$cfg{map},
  'nodry'             => \$cfg{nodry},
  'reindex'           => \$cfg{reindex},
  'remove-actions'    => \$cfg{remove},
  'source|s=s@'       => \$cfg{source},
  'user-field|u=s@'   => \$cfg{logins},
  'verbose|v'         => \$cfg{verbose},
) or quit(1,1);

# Check whether to print the help page
quit(0, 1) if $cfg{help};

# collect possible source topics
$cfg{source} = [split(/,/, join(',', @{$cfg{source}}))];

# collect user field names
$cfg{logins} = [split(/,/, join(',', @{$cfg{logins}}))];

# collect form and date field mappings
collectHashValues('dateformat', 'defaults', 'filter', 'map');

unless (scalar @{$cfg{source}}) {
  print "\nMissing parameter 'source'.\n";
  quit(1,1);
}

if ($cfg{remove}) {
  if ($cfg{host}) {
    require Foswiki::Contrib::VirtualHostingContrib::VirtualHost;
    print "Processing host '$cfg{host}'...\n";
    Foswiki::Contrib::VirtualHostingContrib::VirtualHost->run_on($cfg{host}, \&remove);
  } else {
    remove();
  }

  exit 0;
}

unless ($cfg{list}) {
  unless ($cfg{context}) {
    print "\nMissing parameter 'context'\n";
    quit(1,1);
  }

  unless ($cfg{form}) {
    print "\nMissing parameter 'form'\n";
    quit(1,1);
  }
}

if ($cfg{host}) {
  require Foswiki::Contrib::VirtualHostingContrib::VirtualHost;
  print "Processing host '$cfg{host}'...\n";
  Foswiki::Contrib::VirtualHostingContrib::VirtualHost->run_on($cfg{host}, \&process);
} else {
  process();
}

sub printHelp {
  my $help = <<HELP;

  -c    --context                     Defines the context to use for converted tasks.
                                      One of 'Web.Topic', '\$source' or 'regexp:PATTERN/REPLACEMENT'
                                      Usage:
                                        --context '\$source'
                                        --context 'MyWeb.MyTaskTopic'
                                        --context 'regexp:Tasks/' --source 'MyWeb.ActionTrackerTasks0001'
                                        --context 'regexp:Actions/' --source 'MyWeb.MyTopic00*Actions'

        --defaults                    List of key/value pairs holding default values for empty/missing form field values.
                                      Usage:
                                        --defaults 'AssignedTo=Team,Type=Information'
                                        --defaults 'AssignedTo=Team' --defaults 'Type=Information'

  -d    --dateformat                 List of key/value pairs defining a parsable date format to use for converting old
                                      date strings to new epoch strings.
                                      Usage:
                                        --dateformat 'created=\$epoch,due=\$epoch'
                                        --dateformat 'created=\$epoch' --dateformat 'due=\$epoch'

        --filter                      List of key/value pairs used to filter ActionTrackerPlugin actions by field values.
                                      Usage:
                                        --filter 'context=AppTopic001'

        --force                       Forces 'taskconvert' to create a TasksAPIPlugin task even if the according action
                                      is missing a mapped form field value. See also parameter '--defaults'.

  -f    --form                        The form to use for converted TasksAPI tasks.
                                      Usage:
                                        --form 'MyWeb.MyTaskForm'

        --ignore-duplicates           Do NOT check for already existing tasks.
                                      Turning on this flag may lead to duplicated tasks.
                                      You have been warned!

  -h    --help                        Shows this help.

        --host                        Runs this script for the given virtual host. [requires VirtualHostingContrib]
                                      Usage:
                                        --host 'virtual.domain.tld'

  -l    --list-fields                 Reads source topics given by '--source' and prints all used field names of found actions.

  -m    --map                         List of key/value pairs to map old ActionTracker fields to new TasksAPI form fields.
                                      Usage:
                                        --map 'creator=Author,created=Created'
                                        --map 'creator=Author' --map 'created=Created'

        --nodry                       By default 'taskconvert' will not commit any changes to TasksAPIPlugin.
                                      Passing this flag will turn off that kind of a "dry run".
                                      Each found Action will be converted to a TasksAPIPlugin task.

        --reindex                     Forces TasksAPI to recreate its internal tasks index.

        --remove-actions              Tries to remove all occurances of AT ACTION macros from the supplied source topic.
                                      Usage:
                                        --source 'MyWeb.MyTopic' --remove-actions
                                        --source 'MyWeb.MyAutoINC00*' --remove-actions

  -s    --source                      List of webtopics to read ActionTracker actions from.
                                      You may also use an asterisk as wildcard character.
                                      Usage:
                                        --source 'MyWeb.Topic1,MyWeb.Topic2'
                                        --source 'MyWeb.Topic1' --source 'MyWeb.Topic2'
                                        --source 'MyWeb.Topic00*'
                                        --source 'MyWeb.Topic00*Actions'

  -u    --user-field                  List of ActionTracker fields container user information.
                                      Field values specified by this parameter will be converted and
                                      stored as CUID.
                                      Usage:
                                        --user-field 'creator' --user-field 'who'
                                        --user-field 'creator,who'

  -v    --verbose                     Enables verbose logging.

HELP
  print $help;
}

sub collectHashValues {
  foreach my $field (@_) {
    my @keys = keys %{$cfg{$field}};
    for my $k (@keys) {
      my $v = $cfg{$field}{$k};
      if ($v =~ /,/ && $v =~ /=/) {
        my @pairs = split(/,/, $v);
        $cfg{$field}{$k} = shift @pairs;
        foreach my $pair (@pairs) {
          my @map = split(/=/, $pair);
          $cfg{$field}{$map[0]} = $map[1] // '';
        }
      }
    }
  }
}

sub remove {
  if ($cfg{form} !~ /^$/ || $cfg{context} !~ /^$/) {
    print "Parameter '--remove-actions' cannot be given along with '--form' or '--context' \n";
    return;
  }

  new Foswiki('admin');
  foreach my $source (@{$cfg{source}}) {
    my ($web, $topic) = Foswiki::Func::normalizeWebTopicName(undef, $source);
    if ($topic =~ /\*/) {
      $topic =~ s/\*/\.\*/g;
      my @topics = Foswiki::Func::getTopicList($web);
      foreach my $t (@topics) {
        if ($t =~ /$topic/) {
          print "Processing source topic '$web.$t'...\n" if $cfg{verbose};
          removeActions($web, $t);
        }
      }
    } else {
      print "Processing source topic '$web.$topic'...\n" if $cfg{verbose};
      removeActions($web, $topic);
    }
  }

  print "\n\nYou have to pass parameter '--nodry' to remove those actions from their source topics!\n" unless $cfg{nodry};
}

sub removeActions {
  my ($web, $topic) = @_;
  return unless Foswiki::Func::topicExists($web, $topic);
  my ($meta, $text) = Foswiki::Func::readTopic($web, $topic);

  if ($cfg{nodry}) {
    $text =~ s/\n*%ACTION\{(?:(?!%ACTION\{).)*%ENDACTION%\n*//gx;
    Foswiki::Func::saveTopic(
      $web, $topic, $meta, $text,
      {dontlog => 1, minor => 1, forcenewrevision => 1}
    );
  } else {
    print "Found actions in webtopic '$web.$topic':\n";
    while ($text =~ s/\n*(%ACTION\{(?:(?!%ACTION\{).)*%ENDACTION%)\n*//x) {
      print "---\n$1\n---\n\n";
    }
  }
}

sub process {
  new Foswiki('admin');

  Foswiki::Func::setPreferencesValue('tasksapi_suppress_logging', '1');
  foreach my $source (@{$cfg{source}}) {
    my ($web, $topic) = Foswiki::Func::normalizeWebTopicName(undef, $source);
    if ($topic =~ /\*/) {
      $topic =~ s/\*/\.\*/g;
      my @topics = Foswiki::Func::getTopicList($web);
      foreach my $t (@topics) {
        if ($t =~ /$topic/) {
          print "Processing source topic '$web.$t'...\n" if $cfg{verbose};
          processSource($web, $t);
        }
      }
    } else {
      print "Processing source topic '$web.$topic'...\n" if $cfg{verbose};
      processSource($web, $topic);
    }
  }
  Foswiki::Func::setPreferencesValue('tasksapi_suppress_logging', '0');
  Foswiki::Plugins::TasksAPIPlugin::_fullindex() if $cfg{reindex};
  exit 0;
}

sub processSource {
  my ($web, $topic) = @_;

  unless (Foswiki::Func::topicExists($web, $topic)) {
    print STDERR "Aborting! Given source '$web.$topic'. The specified webtopic doesn't exist!\n";
    exit 1;
  }

  my ($fweb, $ftopic, $ctx);
  unless ($cfg{list}) {
    ($fweb, $ftopic) = Foswiki::Func::normalizeWebTopicName(undef, $cfg{form});
    unless ($cfg{form} && Foswiki::Func::topicExists($fweb, $ftopic)) {
      print STDERR "The given form '$cfg{form}' doesn't exist! Aborting!\n";
      exit 1;
    }

    $ctx = $cfg{context};
    $ctx = "$web.$topic" if $ctx =~ /^\$source$/;
    if (my ($pattern, $replace) = ($ctx =~ /^regexp:(.*?)\/(.*)$/)) {
      my $src = "$web.$topic";
      $src =~ s/$pattern/$replace/;
      $ctx = $src;
    }
  }

  my ($meta, $text) = Foswiki::Func::readTopic($web, $topic);
  my $set = Foswiki::Plugins::ActionTrackerPlugin::ActionSet::load($web, $topic, $text, 1);
  my @sets = grep {
    defined $_ && ref($_) && $_->isa('Foswiki::Plugins::ActionTrackerPlugin::Action')
  } @{$set->{ACTIONS}};

  unless (scalar @sets) {
    print "No actions found in source topic '$web.$topic'!\n" if $cfg{verbose};
    return;
  }

  foreach my $a (@sets) {
    my $action = {%$a, %{$a->{unloaded_fields}}};

    my $skip = 0;
    foreach my $k (keys %{$cfg{filter}}) {
      if ($action->{$k} ne $cfg{filter}{$k}) {
        $skip = 1;
        last;
      }
    }
    next if $skip;

    if ($cfg{list}) {
      while (my ($k, $v) = each %$action) {
        next if $k eq 'unloaded_fields';
        print "$k -> $v\n";
      }
      print "\n\n";
      next;
    }

    my %task;
    while (my ($k, $v) = each %{$cfg{defaults}}) {
      $task{$k} = $v;
    }

    my @missing;
    while (my ($k, $v) = each %{$cfg{map}}) {
      if ($action->{$k}) {
        if (grep (/^$k$/, @{$cfg{logins}})) {
          my @names = map {
            my $wikiName = Foswiki::Func::getWikiName($_);
            my $cuid = Foswiki::Func::getCanonicalUserID($wikiName);
            $cuid || $wikiName
          } split(/\s*,\s*/, $action->{$k});

          $task{$v} = join(', ', @names);
          $task{$v} = $action->{$k} unless $task{$v};


        } else {
          $task{$v} = $action->{$k};
        }
      } elsif (!$cfg{defaults}{$v}) {
        push(@missing, $k);
        next;
      }

      if (defined $cfg{dateformat}{$k}) {
        $task{$v} = Foswiki::Time::formatTime($task{$v}, "$cfg{dateformat}{$k}");
      }
    }

    if (scalar @missing) {
      @missing = map {"$_ ($cfg{map}{$_})"} @missing;
      my $m = join(', ', @missing);
      print "Missing keys: $m for action $action->{uid}\n" if $cfg{verbose};
      exit 1 unless $cfg{force};
    }

    $task{Context} = $ctx;
    $task{form} = "$fweb.$ftopic";

    if ($cfg{nodry}) {
      unless ($cfg{dedup}) {
        my $ret = Foswiki::Plugins::TasksAPIPlugin::Task::search(query => \%task, acl => 0);
        if ($ret->{total}) {
          print "Skipping already existing task for action '$action->{uid}'.\n" if $cfg{verbose};
          next;
        }
      }

      my $t = Foswiki::Plugins::TasksAPIPlugin::Task::create(%task);
      print "Created task '$t->{id}'\n" if $cfg{verbose};
    } elsif ($cfg{verbose}) {
      print "---START NEW TASK---\n";
      while ( my ($k, $v) = each %task ) {
        print "$k -> $v\n";
      }
      print "---END NEW TASK---\n\n";
    }
  }
}

sub quit{
  my ($c, $h) = @_;
  printHelp() if $h;
  exit $c;
}

1;
