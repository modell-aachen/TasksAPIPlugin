%META:TOPICPARENT{name="Plugins"}%
---+ !TasksAPIPlugin

%SHORTDESCRIPTION%

%TOC%

---++ Introduction

%JQREQUIRE{"chili"}%
This plugin provides a task management system for Foswiki. It stores each task
as a separate topic, so that files and arbitrary metadata can be attached to
it using the standard mechanisms. Tasks are additionally indexed in a
database.

In addition to the TASKSGRID macro which provides a complete user interface
out of the box, a Javascript/REST API is available.

%IF{
   "$USERNAME ingroup 'AdminGroup'"
   then="---++ Task Indexing
$percntBUTTON{
    $quot$percntMAKETEXT{\"Reindex all tasks\"}$percnt$quot
    target=$quot$percntWEB$percnt.$percntTOPIC$percnt?taskindex=full$quot
}$percnt $percntCLEAR$percnt"
}%

---++ Installation
%$INSTALL_INSTRUCTIONS%

---+++ Plugin-specific installation instructions

The following Perl packages are required:

   * DBD::SQLite
   * DBI
   * Number::Bytes::Human
   * Date::Manip
   * File::MimeInfo

Debian packages exist for all of these:

<verbatim class="bash">aptitude install libdbd-sqlite3-perl libdbi-perl libnumber-bytes-human-perl libdate-manip-perl libfile-mimeinfo-perl</verbatim>

Before the plugin can be used, a web must created which is used for storing
the tasks. If you use the default configuration, its name has to be =Tasks=.
Create it from the =_empty= template, and set its
=ALLOWWEBVIEW/ALLOWWEBCHANGE/ALLOWWEBRENAME= to something very restrictive,
e.g. =AdminUser=.

---++ Metadata

Tasks can have an arbitrary form attached to them, but some fields are
required:

   * =TopicType=: value must be set to =task=. This is a sanity check to make
     sure the wrong form is not used by accident. We recommend using a hidden
     field for this.
   * =Context=: a reference to the topic which "owns" the task (e.g.
     !Foo.BazProjectMeetingMinutes or !Main.JohnDoe)
   * =Status=: one of =open=, =closed=, =deleted=. Other values should not be
     added; instead, a different field can and *should* be used to further distinguish
     between different states of a task. See =TASKCFG_MAP_STATUS= and =TASKCFG_MAP_STATUS_FIELD=.

A number of other fields, if used, should use these standard names:

   * =Parent=: a reference to the parent task (if this is a child task), empty
     otherwise. This field does not need to exist for tasks which don't ever
     appear as children.
   * =Author=: the creator of the task. Set the default value to =%<nop>WIKINAME%=.
   * =Created=: the creation time. Set the default value  to
     =%<nop>GMTIME{"$epoch"}%=.
   * =Changed=: the time of the most recent change. Set the default value  to
     =%<nop>GMTIME{"$epoch"}%=.
   * =Closed=: the time a task was closed. Handled internally.
   * =Title=: user-defined title of the task
   * =AssignedTo=: the user this task is assigned to. This is generally meant
     to be a single person because with task with multiple assignees, there is
     a tendency for nobody to actually feel responsible for the task.
     Nevertheless, lists of users are supported, too.
   * =Description=: user-defined detail information about the task
   * =DueDate=: the due date for the task

---++ Configuration

The settings in =/bin/configure= (or lib/LocalSite.cfg) are fairly
self-explanatory; if you want to use an alternative database, you'll need to
know how DBI's DSN URIs work.

In addition, tasks can be configured on a per-form basis, simply by adding
preferences to a task form. The preference values can use macros (which will
be expanded when evaluating a task's settings) and some special placeholders.
_These preferences can only be set in the form, not in the task topic itself._

---+++ Placeholders in preferences

   * =$curvalue(Field)=: expands to the value of the task's =Field= form
     field.
   * =$taskpref(FOO)=: expands to the value of the =TASKCFG_FOO= preference
     for this task.

---+++ Available preferences

---++++ =TASKCFG_GRID_TEMPLATE=

Name of a template section used to render the task in a task grid. This can be
used to render different types of tasks differently, by setting this to
different template sections in different task forms.

---++++ =TASKCFG_NOTIFY_(type)=

A list of users to notify by e-mail when a certain type of event happens. The
following events exist:

   * =CREATED= - triggered when a new task is created.
   * =REASSIGNED= - triggered when the =AssignedTo= field is changed as part of an update.
   * =CLOSED= - triggered when the task's status changes to 'closed'.
   * =REOPENED= - triggered when the task's status changes from 'closed' to 'open'.
   * =CHANGED= - triggered when a task is changed and none of the other events apply.
   * =REMIND= - triggered when a reminder is sent out for a task.

Examples:

   * <code>Set TASKCFG_NOTIFY_CREATED = !AdminUser</code> - notify the administrator when a task is created.
   * <code>Set TASKCFG_NOTIFY_REASSIGNED = $curvalue(!AssignedTo)</code> - notify the new assignee when a task is reassigned.
   * <code>Set TASKCFG_NOTIFY_CHANGED = $curvalue(!AssignedTo), $curvalue(Informees)</code> - notify the assignee and users on the notification list on any normal changes to the task.

*Note*:
Email notifications can be disabled globally by setting =$Foswiki::cfg{TasksAPIPlugin}{DisableNotifications}=
to a =true= value.

---++++ =TASKCFG_NOTIFY_(type)_TEMPLATE=

Assigns a template used to render the e-mail notification (see previous
preference). By default, e.g. the =CREATED= event will use the
!TasksAPICreatedMailTemplate.

---++++ =TASKCFG_SCHEDULE_REOPEN=

A date/time delta specification to automatically re-open a task after it has
been closed. For example, if this is set to "2 weeks", the task will be
re-opened two weeks after it is closed. By default, tasks are not reopened
automatically.

---++++ =TASKCFG_SCHEDULE_REMIND=

A date/time delta specification to periodically send a reminder for a task
based on the given delta. For example, if this is set to "2 weeks", users will
receive a reminder about the task every two weeks until it is closed or the
delta is changed. By default, no reminders are sent.

---++++ =TASKCFG_HAS_CHILDREN=

Set to =true= (or =1= or =on=) to signal that this task can have child tasks
nested within it.

---++++ =TASKCFG_TASK_TYPE=

A unique string used as identifier for tasks created with the given form.
See section _Task Flavors_ for further details.
=TasksAPIPlugin= uses a kind of caching mechanism for its templates. For that reason
this string should be *unique* across all =task forms=. =TasksAPIPlugin= will print
a warning into Foswiki's =error.log= if it detects a non-unique task type.

---++++ =TASKCFG_TASK_TEMPLATE_FILE=

A webtopic containing (all) templates used to render tasks created with the given form.
See section _Task Flavors_ for further details.

---++++ =TASKCFG_TASK_TEMPLATE=
The name of the template used to render a task within its task tracker.

---++++ =TASKCFG_EDITOR_TEMPLATE=
The name of the template used to render an editor to create or manipulate the task.s

---++++ =TASKCFG_SOLRHIT_ICON=

Relative or absolute url to an image (16x16) used to decorate Solr search results.

---++++ =TASKCFG_MAP_STATUS=, =TASKCFG_MAP_STATUS_FIELD=

With these options you can define a custom status field that allows you to
define custom additional states. The built in statuses =open= and =closed= in
the =Status= field remain but are no longer directly edited by the user; instead
you let them use your custom status field in the edit interface.

The =TASKCFG_MAP_STATUS_FIELD= option specifies the name of your custom status
field.

The =TASKCFG_MAP_STATUS= option defines a mapping of your custom statuses to the
built in statuses, so that each of your custom statuses can be identified as
corresponding to =open= or =closed=. This means that any wiki topic that renders
tasks can, for example, show all open tasks, including any of your custom
statuses.

Example:

<verbatim class="tml">
   * Set TASKCFG_MAP_STATUS_FIELD = MyCustomStatus
   * Set TASKCFG_MAP_STATUS = rejected=closed, feedback=open, review=open
</verbatim>

This specifies that your custom "rejected" status maps to the internal "closed"
status (rejection is a kind of closing, after all), and so on. Any status not
listed in this option is used as-is.

When defining custom statuses, remember to keep an "open" and "closed" status so
that "quick close" widgets in the user interface still know which of your custom
statuses to switch to.

---+++ Task Flavors

In some circumstances you might want to include tasks, which are created in different contexts,
in a single grid. For instance, render all tasks asigned to yourself into your
personal page by specifying a macro like the following one:
<verbatim class="tml">
%TASKSGRID{
  context="any"
  query="...""
}%
</verbatim>
That macro will render a grid containing all tasks matching the given query.
Unfortunately, in most cases tasks created in different contexts differ from each
other not only by their context but by the given form as well as the used template.

To render a grid which includes tasks from more than context *and* which renders
each task with its own template within that grid, specify the grid's =flavor=
parameter:
<verbatim class="tml">
%TASKSGRID{
  context="any"
  query="...""
  flavor="perspage"
}%
</verbatim>
Foswiki will detect that parameter and appends it to the task template name.
Let's say a task's template is called =tasksapi::task= and you specified a
flavor called =perspage= then Foswiki will try to expand the template called
=tasksapi::task_perspage=. Obviously this leads to another problem. All templates
needs to be placed in a single =templatefile=. To work around that limitation
you may (or let's say should) set =TASKCFG_TASK_TYPE= and =TASKCFG_TASK_TEMPLATE_FILE=
within your task's form. While =TASKCFG_TASK_TYPE= is used to cache template
expands, =TASKCFG_TASK_TEMPLATE_FILE= specifies the webtopic of the according
template definition.

To avoid hard coded web names within your form you may also use the variable
=$formweb= which expands to the web containing the task form. E.g.:
<verbatim class="tml">
   * Set TASKCFG_TASK_TYPE = minute
   * Set TASKCFG_TASK_TEMPLATE_FILE = $formweb.TaskTemplates
</verbatim>

Additionaly, you may want to include some extra styles or scripts used by a
taskgrid in case flavors are active.
To do so update your task form as shown below
<verbatim class="tml">
   * Set TASKCFG_FLAVOR_CSS = %PUBURLPATH%/%SYSTEMWEB%/path/to/css1,%PUBURLPATH%/%SYSTEMWEB%/path/to/css2
   * Set TASKCFG_FLAVOR_JS = %PUBURLPATH%/%SYSTEMWEB%/path/to/js1,%PUBURLPATH%/%SYSTEMWEB%/path/to/js2
</verbatim>

In case those styles and/or scripts should be applied to a 'single' flavor only:
<verbatim class="tml">
   * Set TASKCFG_(flavor)_CSS = %PUBURLPATH%/%SYSTEMWEB%/path/to/css
   * Set TASKCFG_(flavor)_JS = %PUBURLPATH%/%SYSTEMWEB%/path/to/js
</verbatim>


---+++ Access permissions

Tasks don't use Foswiki's permissions system because usually the majority of
the permissions should be inherited from the task's context (the topic that
"owns" the task) or parent tasks. Instead, task permissions are controlled by
a mechanism similar to task preferences: add a =TASKACL_(type)= (valid types
are listed below) preference to the task's form. In this, the same
placeholders as in task preferences can be used, plus these:

   * =$parentACL=: includes the parent task's ACL
   * =$contextACL=: applies the context's Foswiki permissions
   * =$wikiACL(Web.Topic VIEW)=: applies Foswiki's VIEW permissions for
     =Web.Topic=

The ACL itself is a comma-separated list of users and/or groups; additionally
the special value =*= (similar to the new ACL syntax in Foswiki 1.2) refers to
all logged in users.

Unlike in Foswiki, there is no distinction of ALLOW and DENY. Only users
covered by the ACL value are granted access.

Due to this difference in how ACLs work, the placeholders =$contextACL= and
=$wikiACL(...)= have special behaviour: any other entry in a task ACL will
allow access if it matches the current user, and otherwise the next entry will
be checked. Foswiki ACLs, however, can actively deny access to someone, so if
one of the Foswiki ACL placeholders is used, its result is taken as definite
and the rest of the task ACL will be ignored. Therefore, if you use
=$contextACL= or =$wikiACL(...)=, always put it last.

If an ACL is not set, or set to an empty value, it defaults to its context's
ACL. To avoid inheriting ACLs from a task's context an additional boolean
preference may be used:
   * =TASKCFG_IGNORE_CONTEXT_ACL=
Setting =TASKCFG_IGNORE_CONTEXT_ACL= to a true value will ignore all inherited
access permissions.
Equivalent to =TASKCFG_IGNORE_CONTEXT_ACL= you may also specify
=TASKCFG_IGNORE_WIKI_ACL= which will forece =TasksAPIPlugin= to ignore all
specified =$wikiACL= settings.

The following ACL types currently exist:

   * =VIEW=: see the task (it will not show up anywhere if this is not set)
   * =CHANGE=: edit the task

*Example* %BR%
Assume we're having a form used by =TasksAPIPlugin= containing at least the fields
=AssignedTo=, =Author=, =Context= and =Informees=. In field =Context= holds,
by default, a webtopic. The other fields are user fields.

The preference below will set =VIEW permissions= for all tasks, which are defined
by the used form, to all users mentioned in =AssignedTo=, =Author= and =Informees=.
In addition, Foswiki's =VIEW permissions= are inherited.
<verbatim class="tml">
   * Set TASKACL_VIEW = $curvalue(AssignedTo),$curvalue(Author),$curvalue(Informees),$wikiACL($curvalue(Context) VIEW)

   # ... is the same as ...
   * Set TASKCFG_IGNORE_CONTEXT_ACL = 0
   * Set TASKACL_VIEW = $curvalue(AssignedTo),$curvalue(Author),$curvalue(Informees),$wikiACL($curvalue(Context) VIEW)

   # ... is the same as ...
   * Set TASKCFG_IGNORE_CONTEXT_ACL = 0
   * Set TASKACL_VIEW = $curvalue(AssignedTo),$curvalue(Author),$curvalue(Informees),$contextACL

   # ... is the same as ...
   * Set TASKCFG_IGNORE_CONTEXT_ACL = 0
   * Set TASKACL_VIEW = $curvalue(AssignedTo),$curvalue(Author),$curvalue(Informees)

   # ... is the same as ...
   * Set TASKACL_VIEW = $curvalue(AssignedTo),$curvalue(Author),$curvalue(Informees)
</verbatim>

---++ Macros

---+++ TASKSGRID
%INCLUDE{"VarTASKSGRID"}%

---++++ Enhanced queries
A query is defined as JSON string and passed to the macro (or RESTful API) as shown below:
<verbatim class="tml">
%TASKSGRID{
  ...
  query="{\"Status\": \"open\"}"
  ...
}%
</verbatim>

You may also limit the result set to a specific form by extending the query by
the =form= key:
<verbatim class="tml">
%TASKSGRID{
  ...
  query="{\"form\": \"FormWeb.FormTopic\"}"
  ...
}%

%TASKSGRID{
  ...
  query="{\"Status\": \"open\", \"form\": \"FormWeb.FormTopic\"}"
  ...
}%
</verbatim>

Multi-values are formatted as JSON array:
<verbatim class="tml">
%TASKSGRID{
  ...
  query="{\"Status\": [\"open\", \"closed\"]}"
  ...
}%
</verbatim>

It is even possible to select only tasks matching a given substring or between
a date range:
<verbatim class="tml">
%TASKSGRID{
  ...
  query="{\"Title\": {\"type\": \"like\", \"substring\": \"foo\"}}"
  ...
}%

%TASKSGRID{
  ...
  query="{\"DueDate\": {\"type\": \"range\", \"from\": 0, \"to\": 1455292071}}"
  ...
}%
</verbatim>

---+++ TASKSFILTER
%INCLUDE{"VarTASKSFILTER"}%

---+++ TASKINFO
%INCLUDE{"VarTASKINFO"}%

---++ Task Templates
Templates as used by =TasksAPIPlugin= split into two sections:
   * user defined; *mostly mandatory*
   * internal templates

While it's neither necessary nor advisable to override =TasksAPI's= internal templates,
an wiki application which uses =TasksAPIPlugin= has to provide templates for displaying
its tasks. Due to the fact that a task tracker is based on HTML tables, an application
must also specify a so called caption template, which is used to render that table's
header.

---+++ User defined tempaltes
---++++ Content template
%MAROON% *mandatory* %ENDCOLOR%<br>
Used to render a task in details view aka the task panel which opens after a
task has been clicked by a user. =TasksAPIPlugin= includes the content of that
template into its internal overlay definitions.
<verbatim class="tml">
%TMPL:DEF{"myapp::overlay::content"}%
...
%TMPL:END%
</verbatim>

---++++ Caption template
%MAROON% *mandatory* %ENDCOLOR%<br>
A HTML table row defining the task tracker's table head. In order to enable sorting
for a column, specify the _data-sort_ attribute as shown below.
<verbatim class="tml">
%TMPL:DEF{"myapp::caption"}%
<tr>
  <th data-sort="MyFormFieldName">...</th>
  <th>...</th>
  <th>...</th>
</tr>
%TMPL:END%
</verbatim>

---++++ Editor template
%MAROON% *mandatory* %ENDCOLOR%<br>
A template to render the task editor. =TasksAPIPlugin= sets a context so that it's
possible to distinguish between editing and creating a task.
<verbatim class="tml">
%TMPL:DEF{"myapp::editor"}%%{
}%%IF{
  "'%taskeditor_isnew%'='0'"
  then="$percntTMPL:P{\"myapp::editor::edit\"}$percnt"
  else="$percntTMPL:P{\"myapp::editor::new\"}$percnt"
}%%{
}%%TMPL:END%

%TMPL:DEF{"myapp::editor::edit"}%
%{ template used to edit an existing task }%
%TMPL:END%

%TMPL:DEF{"myapp::editor::new"}%
%{ template used to create a new task }%
%TMPL:END%
</verbatim>

---++++ Filter template
%GREEN% *optional* %ENDCOLOR%<br>
A custom template specifying the filter controls to include within a task tracker
<verbatim class="tml">
%TMPL:DEF{"myapp::filter"}%
%TASKSFILTER{"Title"}%
%TMPL:END%
</verbatim>

---++++ Task template
%MAROON% *mandatory* %ENDCOLOR%<br>
Defines a task's representation within a tasks table. In equivalence to the caption
template a task (entry) template has to be a table row.<br>
In addition, there are several requirements for a task template
   * *must* to be classed by =task=
   * *must* include two extra columns containing a task's raw data and it's rendered overlay content
      * You may just =copy and paste= those two columns from the example below.

<verbatim class="tml">
%TMPL:DEF{"myapp::task"}%
<tr class="task">
  <td>...</td>
  <td>...</td>
  <td>...</td>
  <td class="hidden task-data-container">
    <div class="task-data"><literal>%TASKINFO{meta="json"}%</literal></div>
  </td>
  <td class="hidden task-fullview-container">
    <div class="task-fullview">%TMPL:P{"myapp::overlay::content"}%</div>
  </td>
</tr>
%TMPL:END%
</verbatim>

---+++ Internal templates
=TasksAPIPlugin= ships with [[TasksAPIDefaultTemplate][several templates]] used to wire up a task tracker.
Be *careful* if you decide to override one of the following templates:
---++++ tasksapi::empty
Dummy template for loading scripts and styles. Especially useful when one or more
grid is loaded asynchronously, e.g. by !RenderPlugin. The following snippet will
just inject all required scripts and styles but will *NOT* render any HTML.
<verbatim class="tml">
%TASKSGRID{id="_dummy_for_loading_scripts" template="tasksapi::empty"}%
</verbatim>

---++++ tasksapi::grid
Surrounding markup for a task tracker.

---++++ tasksapi::grid::filter
Defines a tracker's "head" area containing definitions for task filters as well
as the possibility to create new tasks.

---+++++ tasksapi::grid::filter::create
A button to invoke the task editor for task creation.

---+++++ tasksapi::grid::filter::defaults
The default task filter shown to the user: =Created= and =Changed=.

---++++ tasksapi::overlay
Defines the overlay which is shown to the user when a task is edited or at least
in details view.

---++++ tasksapi::overlay::upload
Implements the !DnDUpload (drag'n drop uploads) area.

---++ Converting actions from previous !ActionTrackerPlugin
TasksAPIPlugin ships with a script called *taskconvert* which allows
converting actions created by [[http://foswiki.org/Extensions/ActionTrackerPlugin][ActionTrackerPlugin]].

<verbatim class="bash">> ./taskconvert --help</verbatim>
<verbatim class="bash">
  -c    --context                     Defines the context to use for converted tasks.
                                      One of 'Web.Topic', '$source' or 'regexp:PATTERN/REPLACEMENT'
                                      Usage:
                                        --context '$source'
                                        --context 'MyWeb.MyTaskTopic'
                                        --context 'regexp:Tasks/' --source 'MyWeb.ActionTrackerTasks0001'
                                        --context 'regexp:Actions/' --source 'MyWeb.MyTopic00*Actions'

        --defaults                    List of key/value pairs holding default values for empty/missing form field values.
                                      Usage:
                                        --defaults 'AssignedTo=Team,Type=Information'
                                        --defaults 'AssignedTo=Team' --defaults 'Type=Information'

  -d    --dateformats                 List of key/value pairs defining a parsable date format to use for converting old
                                      date strings to new epoch strings.
                                      Usage:
                                        --dateformats 'created=$epoch,due=$epoch'
                                        --dateformats 'created=$epoch' --dateformats 'due=$epoch'

        --filter                      List of key/value pairs used to filter ActionTrackerPlugin actions by field values.
                                      Usage:
                                        --filter 'context=AppTopic001'

        --force                       Forces 'taskconvert' to create a TasksAPIPlugin task even if the according action
                                      is missing a mapped form field value. See also parameter '--defaults'.

  -f    --form                        The form to use for converted TasksAPI tasks.
                                      Usage:
                                        --form 'MyWeb.MyTaskForm'

  -h    --help                        Shows this help.

        --host                        Runs this script for the given virtual host. [requires VirtualHostingContrib]
                                      Usage:
                                        --host 'virtual.domain.tld'

  -l    --list-fields                 Reads source topics given by '--source' and prints all used field names of found actions.

  -m    --map                         List of key/value pairs to map old ActionTracker fields to new TasksAPI form fields.
                                      Usage:
                                        --map 'creator=Author,created=Created'
                                        --map 'creator=Author' --map 'created=Created'

        --nodry                       By default 'taskconvert' will not commit any changes to TasksAPIPlugin.
                                      Passing this flag will turn off that kind of a "dry run".
                                      Each found Action will be converted to a TasksAPIPlugin task.

        --reindex                     Forces TasksAPI to recreate its internal tasks index.

  -s    --source                      List of webtopics to read ActionTracker actions from.
                                      You may also use an asterisk as wildcard character.
                                      Usage:
                                        --source 'MyWeb.Topic1,MyWeb.Topic2'
                                        --source 'MyWeb.Topic1' --source 'MyWeb.Topic2'
                                        --source 'MyWeb.Topic00*'
                                        --source 'MyWeb.Topic00*Actions'

  -u    --user-field                  List of ActionTracker fields container user information.
                                      Field values specified by this parameter will be converted and
                                      stored as CUID.
                                      Usage:
                                        --user-field 'creator' --user-field 'who'
                                        --user-field 'creator,who'

  -v    --verbose                     Enables verbose logging.
</verbatim>

---++ Javascript Events
=TasksAPIPlugin= exposes some useful to manipulate requests or just indicate something has happened.
All events are fired on the =.tasktracker= itself. To listen to such an event just bind to the desired tracker, e.g.
<verbatim class="js">
$('.tasktracker').on(...)
</verbatim>

Some events are _cancelable_ and marked as such in the description below. Returning a =false value= tells =TasksAPIPlugin=
to stop further processing.

---+++ beforeCreate
*cancelable* <br>
Fired after the user clicked the =Create new entry= button and before the =task editor= has become visible.<br>
An object containing all preferences used to retreive the =task editor= is passed in as parameter. You may
set additional keys by manipulating the =opts= object, e.g. =opts.parent = taskid;=.
<verbatim class="js">
$tracker.on('beforeCreate', function(evt, opts) {...});
</verbatim>

---+++ beforeSave
*cancelable* <br>
Fired just before an edited task is send back to the server. The task is passed in as paramter and my be modified as well.
<verbatim class="js">
$tracker.on('beforeSave', function(evt, task) {...});
</verbatim>

---+++ afterSave
Fired when a task has been saved successfully. The raw task data is passed into the handler.
<verbatim class="js">
$tracker.on('afterSave', function(evt, data) {...});
</verbatim>

---+++ tasksLoaded
An event indicating a =.tasktracker= has finished loading tasks, e.g. on initial page render or after sorting a grid.
<verbatim class="js">
$tracker.on('tasksLoaded', function(evt) {...});
</verbatim>

---++ RESTful API
Load the jQuery plugin by adding the following macro to your page. Make sure
it's enabled in =/bin/configure=.
<verbatim class="tml">
%JQREQUIRE{"tasksapi"}%
</verbatim>

---+++ create
*$.taskapi.create( data )*

Creates a new task.

<verbatim class="js">
var task = {
  form: 'Web.FooForm',
  Field1: 'value',
  Field2: 'value'
};

$.taskapi.create(task).done( function( response ) {
  console.log( response.id ); // prints the id of the newly created task.
}).fail( function( err ) {
  console.log( err );
});
</verbatim>


---+++ get
*$.taskapi.get( query, limit [optional, defaults to 9999], offset [optional, defaults to 0], sort [optional] )*

Retrieves tasks by a given query.

<verbatim class="js">
$.taskapi.get({Responsible: "AdminUser"}).done( function( res ) {
  _.each( res.data, function( result ) {
    console.log( result );
  });
});
</verbatim>


---+++ getAll
*$.taskapi.getAll( limit [optional, defaults to 9999], offset [optional, defaults to 0], sort [optional] )*

Retrieves all tasks.

<verbatim class="js">
$.taskapi.getAll().done( function( res ) {
  _.each( res.data, function( result ) {
    console.log( result );
  });
});
</verbatim>


---+++ update
*$.taskapi.update( task )*

Updates an existing task identified by its id.

<verbatim class="js">
var taskToUpdate = {
  id: 'Tasks.Task-134n213kj4hjk',
  UpdatedField: 'updatedValue'
};

$.taskapi.update( taskToUpdate ).done( function( response ) {
  console.log( response );
});
</verbatim>


---+++ multiupdate
*$.taskapi.multiupdate( tasks )*

Same as *update* but takes multiple tasks identified by their id.

<verbatim class="js">
var tasksToUpdate = {
  'Tasks.Task-1': {
    UpdatedField: 'updatedValue'
  },
  'Tasks.Task-2': {
    UpdatedField: 'updatedValue'
  }
};

$.taskapi.multiupdate( tasksToUpdate ).done( function( response ) {
  for( var id in response ) {
    console.log( 'Updated task ' + id + ' with result' );
    console.log( response[id] );
  }
});
</verbatim>

---++ Scripts
All scripts are located in the =tools= directory of your Foswiki installation.

---+++ taskconvert
A script used to convert the previous [[http://foswiki.org/Extensions/ActionTrackerPlugin][ActionTrackerPlugin]]
tasks into =TasksAPIPlugin= tasks. See [[TasksAPIPlugin#Converting_actions_from_previous_ActionTrackerPlugin]]
for further details.

---+++ taskcron
TBD.

---+++ taskindex
Tiny little helper script to rebuild =tasks.db=.

---+++ tasksummary
TBD.

---+++ taskupdate
A script to easily modify stored tasks, e.g. replace an assigned task form.

---++ Examples
%INCLUDE{"TasksAPIPluginExamples"}%

---++ Plugin Info

| Author: | Foswiki:Main.JanKrueger, Foswiki:Main.SvenMeyer |
| Copyright: | &copy; 2015, Modell Aachen GmbH |
| License: | GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]) |
| Release: | %$RELEASE% |
| Version: | %$VERSION% |
| Home: | http://www.modell-aachen.de |
| Support: | http://www.modell-aachen.de |
