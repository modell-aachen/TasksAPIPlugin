%META:TOPICPARENT{name="Plugins"}%
---+ !TasksAPIPlugin

%SHORTDESCRIPTION%

%TOC%

---++ Introduction

This plugin provides a task management system for Foswiki. It stores each task
as a separate topic, so that files and arbitrary metadata can be attached to
it using the standard mechanisms. Tasks are additionally indexed in a
database.

In addition to the TASKSGRID macro which provides a complete user interface
out of the box, a JavaScript/REST API is available.

---++ Installation
%$INSTALL_INSTRUCTIONS%

---+++ Plugin-specific installation instructions

The following Perl packages are required:

   * DBD::SQLite
   * DBI
   * Number::Bytes::Human
   * Date::Manip
   * File::MimeInfo

Debian packages exist for all of these:

<verbatim>aptitude install libdbd-sqlite3-perl libdbi-perl libnumber-bytes-human-perl libdate-manip-perl libfile-mimeinfo-perl</verbatim>

Before the plugin can be used, a web must created which is used for storing
the tasks. If you use the default configuration, its name has to be =Tasks=.
Create it from the =_empty= template, and set its
=ALLOWWEBVIEW/ALLOWWEBCHANGE/ALLOWWEBRENAME= to something very restrictive,
e.g. =AdminUser=.

---++ Metadata

Tasks can have an arbitrary form attached to them, but some fields are
required:

   * =TopicType=: value must be set to =task=. This is a sanity check to make
     sure the wrong form is not used by accident. We recommend using a hidden
     field for this.
   * =Context=: a reference to the topic which "owns" the task (e.g.
     !Foo.BazProjectMeetingMinutes or !Main.JohnDoe)
   * =Status=: one of =open=, =closed=, =deleted=. Other values should not be
     added; instead, a different field can be used to further distinguish
     between different states of a task.

A number of other fields, if used, should use these standard names:

   * =Parent=: a reference to the parent task (if this is a child task), empty
     otherwise. This field does not need to exist for tasks which don't ever
     appear as children.
   * =Author=: the creator of the task. Set the default value to =%WIKINAME%=.
   * =Created=: the creation time. Set the default value  to
     =%GMTIME{"$epoch"}=.
   * =Closed=: the time a task was closed. Handled internally.
   * =Title=: user-defined title of the task
   * =AssignedTo=: the user this task is assigned to. This is generally meant
     to be a single person because with task with multiple assignees, there is
     a tendency for nobody to actually feel responsible for the task.
     Nevertheless, lists of users are supported, too.
   * =Description=: user-defined detail information about the task
   * =DueDate=: the due date for the task

---++ Configuration

The settings in =/bin/configure= (or lib/LocalSite.cfg) are fairly
self-explanatory; if you want to use an alternative database, you'll need to
know how DBI's DSN URIs work.

In addition, tasks can be configured on a per-form basis, simply by adding
preferences to a task form. The preference values can use macros (which will
be expanded when evaluating a task's settings) and some special placeholders.
_These preferences can only be set in the form, not in the task topic itself._

---+++ Placeholders in preferences

   * =$curvalue(Field)=: expands to the value of the task's =Field= form
     field.
   * =$taskpref(FOO)=: expands to the value of the =TASKCFG_FOO= preference
     for this task.

---+++ Available preferences

---++++ =TASKCFG_GRID_TEMPLATE=

Name of a template section used to render the task in a task grid. This can be
used to render different types of tasks differently, by setting this to
different template sections in different task forms.

---++++ =TASKCFG_NOTIFY_(type)=

A list of users to notify by e-mail when a certain type of event happens. The
following events exist:

   * =CREATED= - triggered when a new task is created.
   * =REASSIGNED= - triggered when the =AssignedTo= field is changed as part of an update.
   * =CLOSED= - triggered when the task's status changes to 'closed'.
   * =REOPENED= - triggered when the task's status changes from 'closed' to 'open'.
   * =CHANGED= - triggered when a task is changed and none of the other events apply.

Examples:

   * <code>Set TASKCFG_NOTIFY_CREATED = AdminUser</code> - notify the administrator when a task is created.
   * <code>Set TASKCFG_NOTIFY_REASSIGNED = $curvalue(AssignedTo)</code> - notify the new assignee when a task is reassigned.
   * <code>Set TASKCFG_NOTIFY_CHANGED = $curvalue(AssignedTo), $curvalue(Informees)</code> - notify the assignee and users on the notification list on any normal changes to the task.

---++++ =TASKCFG_NOTIFY_(type)_TEMPLATE=

Assigns a template used to render the e-mail notification (see previous
preference). By default, e.g. the =CREATED= event will use the
!TasksAPICreatedMailTemplate.

---++++ =TASKCFG_SCHEDULE_REOPEN=

A date/time delta specification to automatically re-open a task after it has
been closed. For example, if this is set to "2 weeks", the task will be
re-opened two weeks after it is closed. By default, tasks are not reopened
automatically.

---++++ =TASKCFG_HAS_CHILDREN=

Set to =true= (or =1= or =on=) to signal that this task can have child tasks
nested within it.

---++++ =TASKCFG_TASK_TYPE=

A unique string used as identifier for tasks created with the given form.
See section _Task Flavors_ for further details.

---++++ =TASKCFG_TASK_TEMPLATE_FILE=

A webtopic containing (all) templates used to render tasks created with the given form.
See section _Task Flavors_ for further details.

---+++ Task Flavors

In some circumstances you might want to include tasks, which are created in different contexts,
in a single grid. For instance, render all tasks asigned to yourself into your
personal page by specifying a macro like the following one:
<verbatim>
%TASKSGRID{
  context="any"
  query="...""
}%
</verbatim>
That macro will render a grid containing all tasks matching the given query.
Unfortunately, in most cases tasks created in different contexts differ from each
other not only by their context but by the given form as well as the used template.

To render a grid which includes tasks from more than context *and* which renders
each task with its own template within that grid, specify the grid's =flavor=
parameter:
<verbatim>
%TASKSGRID{
  context="any"
  query="...""
  flavor="perspage"
}%
</verbatim>
Foswiki will detect that parameter and appends it to the task template name.
Let's say a task's template is called =tasksapi::task= and you specified a
flavor called =perspage= then Foswiki will try to expand the template called
=tasksapi::task_perspage=. Obviously this leads to another problem. All templates
needs to be placed in a single =templatefile=. To work around that limitation
you may (or let's say should) set =TASKCFG_TASK_TYPE= and =TASKCFG_TASK_TEMPLATE_FILE=
within your task's form. While =TASKCFG_TASK_TYPE= is used to cache template
expands, =TASKCFG_TASK_TEMPLATE_FILE= specifies the webtopic of the according
template definition.

To avoid hard coded web names within your form you may also use the variable
=$formweb= which expands to the web containing the task form. E.g.:
<verbatim>
   * Set TASKCFG_TASK_TYPE = minute
   * Set TASKCFG_TASK_TEMPLATE_FILE = $formweb.TaskTemplates
</verbatim>

Additionaly, you may want to include some extra styles or scripts used by a
taskgrid in case flavors are active.
To do so update your task form as shown below
<verbatim>
   * Set TASKCFG_FLAVOR_CSS = %PUBURLPATH%/%SYSTEMWEB%/path/to/css1,%PUBURLPATH%/%SYSTEMWEB%/path/to/css2
   * Set TASKCFG_FLAVOR_JS = %PUBURLPATH%/%SYSTEMWEB%/path/to/js1,%PUBURLPATH%/%SYSTEMWEB%/path/to/js2
</verbatim>

In case those styles and/or scripts should be applied to a 'single' flavor only:
<verbatim>
   * Set TASKCFG_(flavor)_CSS = %PUBURLPATH%/%SYSTEMWEB%/path/to/css
   * Set TASKCFG_(flavor)_JS = %PUBURLPATH%/%SYSTEMWEB%/path/to/js
</verbatim>


---+++ Access permissions

Tasks don't use Foswiki's permissions system because usually the majority of
the permissions should be inherited from the task's context (the topic that
"owns" the task) or parent tasks. Instead, task permissions are controlled by
a mechanism similar to task preferences: add a =TASKACL_(type)= (valid types
are listed below) preference to the task's form. In this, the same
placeholders as in task preferences can be used, plus these:

   * =$parentACL=: includes the parent task's ACL
   * =$contextACL=: applies the context's Foswiki permissions
   * =$wikiACL(Web.Topic,VIEW)=: applies Foswiki's VIEW permissions for
     =Web.Topic=

The ACL itself is a comma-separated list of users and/or groups; additionally
the special value =*= (similar to the new ACL syntax in Foswiki 1.2) refers to
all logged in users.

Unlike in Foswiki, there is no distinction of ALLOW and DENY. Only users
covered by the ACL value are granted access.

Due to this difference in how ACLs work, the placeholders =$contextACL= and
=$wikiACL(...)= have special behaviour: any other entry in a task ACL will
allow access if it matches the current user, and otherwise the next entry will
be checked. Foswiki ACLs, however, can actively deny access to someone, so if
one of the Foswiki ACL placeholders is used, its result is taken as definite
and the rest of the task ACL will be ignored. Therefore, if you use
=$contextACL= or =$wikiACL(...)=, always put it last.

If an ACL is not set, or set to an empty value, it defaults to no restrictions
whatsoever, i.e. anyone, including guests, can view and edit.

The following ACL types currently exist:

   * =VIEW=: see the task (it will not show up anywhere if this is not set)
   * =CHANGE=: edit the task

---++ Macros

---+++ TASKSGRID
%INCLUDE{"VarTASKSGRID"}%

---+++ TASKINFO
%INCLUDE{"VarTASKINFO"}%

---++ Converting actions from previous ActionTrackerPlugin
TasksAPIPlugin ships with a script called *taskconvert* which allows
converting actions created by ActionTrackerPlugin. To convert an AT controlled
topic just execute *taskconvert* as web server user. You will be prompted for
all necessary parameters during the convertion process. Alternatively you may
supply those parameters as command line arguments:

| *Parameter* | *Description* | *Default* |
| web | The source web name to read from | |
| topic | The source topic name ro read from | |
| form | The TasksAPIPlugin compatibly form to use for converted tasks | System.TasksAPIDefaultTaskForm |
| context | The context for the newly created task | web.topic |
| mapping | A comma separated list of key-value pairs to map AT fields to TasksAPI form fields | who=AssignedTo,creator=Author,created=Created,text=Description,due=DueDate,result=Result,state=Status,task=Title |
| dateformat | A comma separated list of key-value pairs to map AT fields to a date representation. This is useful to convert epoch time strings to date strings | due="$day $month $year" |
| verbose | Flag. Output some information about converted tasks | 0 |
| reindex | Flag. Trigger a reindex when the convertion has finished | 0 |
| ignoreErrors | Flag. Ignore errors during convertion. Forces the creation of a task | 0 |
| skipErrors | Flag. Skips all tasks for which an error occurred during convertion. | 0 |

*Examples:* <br />
Run the script without any parameters (you will be prompted instead)
<verbatim>sudo -u www-data ./taskconvert</verbatim>
Run the script and supply the source web and topic. Also print some verbose messages and force a reindex of all tasks.
<verbatim>sudo -u www-data ./taskconvert web=Minutes topic=Protocol005 --verbose --reindex</verbatim>

---++ RESTful API
Load the jQuery plugin by adding the following macro to your page. Make sure
it's enabled in _configure_.
<verbatim>
%JQREQUIRE{"tasksapi"}%
</verbatim>

---+++ create
*$.taskapi.create( data )*

Creates a new task.

<verbatim>
var task = {
  form: 'Web.FooForm',
  Field1: 'value',
  Field2: 'value'
};

$.taskapi.create(task).done( function( response ) {
  console.log( response.id ); // prints the id of the newly created task.
}).fail( function( err ) {
  console.log( err );
});
</verbatim>


---+++ get
*$.taskapi.get( query, limit [optional, defaults to 9999], offset [optional, defaults to 0], sort [optional] )*

Retrieves tasks by a given query.

<verbatim>
$.taskapi.get({Responsible: "AdminUser"}).done( function( res ) {
  _.each( res.data, function( result ) {
    console.log( result );
  });
});
</verbatim>


---+++ getAll
*$.taskapi.getAll( limit [optional, defaults to 9999], offset [optional, defaults to 0], sort [optional] )*

Retrieves all tasks.

<verbatim>
$.taskapi.getAll().done( function( res ) {
  _.each( res.data, function( result ) {
    console.log( result );
  });
});
</verbatim>


---+++ update
*$.taskapi.update( task )*

Updates an existing task identified by its id.

<verbatim>
var taskToUpdate = {
  id: 'Tasks.Task-134n213kj4hjk',
  UpdatedField: 'updatedValue'
};

$.taskapi.update( taskToUpdate ).done( function( response ) {
  console.log( response );
});
</verbatim>


---+++ multiupdate
*$.taskapi.multiupdate( tasks )*

Same as *update* but takes multiple tasks identified by their id.

<verbatim>
var tasksToUpdate = {
  'Tasks.Task-1': {
    UpdatedField: 'updatedValue'
  },
  'Tasks.Task-2': {
    UpdatedField: 'updatedValue'
  }
};

$.taskapi.multiupdate( tasksToUpdate ).done( function( response ) {
  for( var id in response ) {
    console.log( 'Updated task ' + id + ' with result' );
    console.log( response[id] );
  }
});
</verbatim>

---++ Plugin Info

| Author: | Foswiki:Main.JanKrueger, Foswiki:Main.SvenMeyer |
| Copyright: | &copy; 2015, Modell Aachen GmbH |
| License: | GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]) |
| Release: | %$RELEASE% |
| Version: | %$VERSION% |
| Home: | http://www.modell-aachen.de |
| Support: | http://www.modell-aachen.de |


